boxplot(VC)
boxplot(VC$len)
boxplot(VC$len, VC$dose)
boxplot(len~dose, data = VC)
boxplot(len~dose, data = VC)
xlabel("Dose")
xlab("Dose")
xlabel = "Dose"
boxplot(len~dose, data = VC, xlabel("Dose"))
boxplot(len~dose, data = VC)
boxplot(len~dose, data = VC, xlabel = "Dose")
boxplot(len~dose, data = VC, xlab = "Dose", ylab = "Tooth Length")
t.test(len ~ supp, data = OJ)
t.test(len ~ dose, data = OJ)
with(OJ, pairwise.t.test(len, dose, p.adjust.method="bonferroni"))
with(OJ, pairwise.t.test(len, dose, p.adjust.method="bonferroni"))
with(VC, pairwise.t.test(len, dose, p.adjust.method="bonferroni"))
with(OJ, pairwise.t.test(len, dose, p.adjust.method="bonferroni"))
oj.out = aov(len ~ dose, data=OJ)
summary(oj.out)
with(VC, pairwise.t.test(len, dose, p.adjust.method="bonferroni"))
vc.out = aov(len ~ dose, data=OJ)
summary(oj.out)
t.test(len ~ dose, paired = F, var.equal = F, data = OJ)
t.test(len ~ dose, paired = F, var.equal = F, data = OJ)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm (x~w)
nls(data = x, weights(w))
x1 <- data.frame(x)
nls(data = x1, weights(w))
w1 <- data.frame(w)
nls(data = x1, weights(w1))
data("mtcars")
cars<- data("mtcars")
cars<- data.table(data("mtcars"))
cars<- datatable(data("mtcars"))
cars<- as.datatable(data("mtcars"))
cars<- as.data.table(data("mtcars"))
cars<- as.data.frame(data("mtcars"))
cars <- data.table(mtcars)
data("mtcars")
cars <- data("mtcars")
colnames(cars)
cars = data("mtcars")
cars
data("mtcars")
library(data.table)
setDT(cars, keep.rownames = TRUE)
setDT(mtcars, keep.rownames = T)
View(mtcars)
View(mtcars)
mtcars$cyl = factor(mtcars$cyl)
ls
lm(mpg ~ cyl + wt)
lm(mpg ~ cyl + wt, data = mtcars)
lm(mpg ~ cyl, data = mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence(lm(y~x))
test <- lm(y~x)
test
summary(test)
hat(test)
influence(test)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
test <- lm(y~x)
influence(test)
summary((test))
influence.measures(test)
fit1 <- lm(mpg~factor(cyl) + wt, data=mtcars)
fit2 <- update(fit1, mpg~factor(cyl) + wt + wt*factor(cyl))
summary(fit1)
summary(fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
data(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
?mtcars
library(MASS)
?shuttle
data(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
lm(shuttle$useNum ~ shuttle$wind)
wind <- lm(shuttle$useNum ~ shuttle$wind)
summary(wind)
View(shuttle)
View(shuttle)
shuttle$windfactor <- factor((shuttle$wind))
wind <- lm(shuttle$useNum ~ shuttle$windfactor)
summayr(wind)
summary(wind)
wind <- lm(shuttle$useNum ~ shuttle$wind + shuttle$sign)
summary(wind)
logAutolander1 <- glm(shuttle$useNum ~ shuttle$windfactor, family='binomial')
summary(logAutolander1)
shuttle$signfactor <- factor((shuttle$sign))
logAutolander2 <- glm(shuttle$useNum ~ shuttle$windfactor + shuttle$signfactor, family='binomial')
summary(logAutolander2)
exp(logAutolander2$coef)
InsectSprays
sprays <- InsectSprays
?sprays
?InsectSprays
InsectSprays$sprayfactor <- factor(InsectSprays$spray)
poissonInsectSpray <- glm(subsetSpray$count ~ subsetSpray$spray, family='poisson')
poissonInsectSpray <- glm(InsectSprays$count ~ subsetSpray$spray, family='poisson')
poissonInsectSpray <- glm(InsectSprays$count ~ InsectSprays$spray, family='poisson')
summary(poissonInsectSpray)
subsetSpray <- InsectSprays[InsectSprays$spray == 'A' | InsectSprays$spray == 'B',]
poissonInsectSpray <- glm(subsetSpray$count ~ subsetSpray$spray, family='poisson')
summary(poissonInsectSpray)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots, function(knot)(x > knot)*(x - knot))
splineTerms
x
xMat<-cbind(1,x,splineTerms)
xMat
linearModel <- lm(y~xMat-1)
linearModel
yhat<-predict(linearModel)
yhat
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
datasubx <- 1:5
datasubx
datasubY <- ( 0.93, 2.05, 2.54, 3.87, 4.97)
datasubY <- c(0.93, 2.05, 2.54, 3.87, 4.97)
lm(datasubY ~ datasubX)
lm(datasubY ~ datasubx)
datasubx <- 0:5
datasubY <- c(0.08,0.93, 2.05, 2.54, 3.87, 4.97)
lm(datasubY ~ datasubx)
intercept <- -0.004762
fit <- lm(I(y - intercept) ~ 0 + x, lin)
fit <- lm(I(y - intercept) ~ 0 + x)
summary(fit)
fit <- lm(I(x - intercept) ~ 0 + y)
summary(fit)
?mtcars
install.packages(car)
install.packages("car")
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
install.packages("caret")
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
librar(caret)
librar(caret)
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("kernlab")
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
View(training)
View(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength, pch=19)
plot(training$CompressiveStrength, training$FlyAsh)
plot(training$CompressiveStrength, pch=19)
plot(training$CompressiveStrength, pch=19, color = training$FlyAsh)
plot(training$CompressiveStrength, pch=19, colour = training$FlyAsh)
plot(training$CompressiveStrength, pch=19, colour=FlyAsh)
plot(CompressiveStrength, pch=19,data=training, colour=FlyAsh)
qplot(CompressiveStrength, pch=19,data=training, colour=FlyAsh)
qplot(CompressiveStrength, pch=19,data=training)
plot(CompressiveStrength, pch=19,data=training)
plot(training$CompressiveStrength, pch=19)
plot(training$CompressiveStrength, pch=19, col = training$FlyAsh)
plot(training$CompressiveStrength, pch=19)
qplot(index,CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
qplot(index,CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
install.packages("Hmisc")
library(Hmisc)
qplot(index,CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
qplot(index,CompressiveStrength, data=training, color=cut2(training$FlyAsh))
qplot(CompressiveStrength, data=training, color=cut2(training$FlyAsh))
plot(CompressiveStrength, data=training, color=cut2(training$FlyAsh))
plot(training$CompressiveStrength, color=cut2(training$FlyAsh))
age <- cut2(training$Age,g=10)
flyash <- cut2(training$FlyAsh,g=10)
byAge <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=age)
byage
byAge
byFlyAsh <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=flyash)
byFlyAsh
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$Superplasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
install.packages("e1071")
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages(rattle)
install.packages("rattle")
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart.plot)
rm(list=ls(all=TRUE))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
install.packages("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
library("rCharts")
install.packages(rcharts)
install.packages("rcharts")
install.packages("shiny")
shiny::runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
library(datasets)
data("eurodist")
distance <- data("eurodist")
eurodist
rownames(distance)
dist2 <- as.matrix(distance)
View(dist2)
View(dist2)
as.matrix(eurodist)
distance <- as.matrix(eurodist)
View(distance)
View(distance)
rownames(distance)
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
distance[,]
distance[,which(Athens)]
distance[,which("Athens")]
colnames(distance)
distance[,"Athens"]
dataset <- as.matrix(distance)
summary(dataset)
dataset[,"Rome"]
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
distance["Athens"]
distance["Athens",]
as.datatable(distance["Athens",])
as.table(distance["Athens",])
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
citydist <- as.table(distance["Athens"],)
citydist
citydist <- as.table(distance["Athens",])
citydist
citydist <- as.table(distance[,"Athens"])
clear citydist
athens
athens[,1] <- rownames(distance)
citydist[,2] <- as.table(distance[,"Athens"])
citydist[,2] <- rownames(distance)
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
dataset <- rocks
dataset <- rock
View(dataset)
View(dataset)
data.class(dataset)
data.frame(distance["Athens",])
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
test <- data.frame(citydist["Athens",])
test <- data.frame(citydist[Athens,])
test1 <- as.matrix(distance)
citydist <- data.frame(test1["Athens",]
)
citydist[,2] <- citydist[,1]/100
View(citydist)
View(citydist)
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
install.packages('devtools')
install.packages('rtools')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='tviggato', token='21A7BDB916617216DC042D13FD9C05F1', secret='KHU3/IMJiZSJNHHp4XQdnIZKb+Tx/mL0tQtCnvgB')
library(rsconnect)
rsconnect::deployApp('C:\Users\tammy\Documents\Coursera\DataProducts')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\tammy\\Documents\\Coursera\\DataProducts')
shiny::runApp('Coursera/DataProducts')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\tammy\\Documents\\Coursera\\DataProducts')
runApp('Coursera/DataProducts')
rm(list=ls(all=TRUE))
runApp('Coursera/DataProducts')
eurodist
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
runApp('Coursera/DataProducts')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\tammy\\Documents\\Coursera\\DataProducts')
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("~/Coursera/DataProducts")
author("ShinyAppPitch")
library('slidify')
install.packages(c("caret", "chron", "colorspace", "data.table", "DBI", "dplyr", "gtable", "Hmisc", "htmltools", "httr", "iterators", "KernSmooth", "manipulate", "Matrix", "munsell", "plyr", "R6", "Rcpp", "RCurl", "rmarkdown", "swirl", "testthat", "TTR", "XML", "zoo"))
library(slidify)
library(slidifyLibraries)
author("EuropeanCities")
3. Use an empty line followed by three dashes to separate slides!
```{r}
slidify("index.Rmd")
library(knitr)
browseURL('index.Rmd')
browseURL('index.html')
browseURL('index.html')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
library(datasets)
kph <- 120
rawdata <- as.matrix(eurodist)
citydist <- data.frame(rawdata["Athens",])
citydist[,2] <- citydist[,1] / kph
colnames(citydist) <- c("Distance (km)", "Driving Time (hours)")
citydist[,]
citydist["Cologne",]
citydist["Milan",]
citydist["Milan" | "Paris",]
citydist[c("Milan","Paris"),]
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "https://github.com/tviggato/Data-Products")
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "Data-Products")
publish(title = 'Data Products Course Project', 'index.html', host = 'rpubs')
publish(title = 'Data Products Course Project', 'index.html', host = 'rpubs')
publish(user = "tviggato", repo = "Data-Products")
author(project_deck)
author("project_deck")
setwd("~/Coursera/DataProducts/EuropeanCities/project_deck")
publish(user = "tviggato", repo = "Data-Products")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "Data-Products")
publish(user = "tviggato", repo = "tviggato.github.io")
publish(user = "tviggato", repo = "tviggato.github.io")
publish(user = "tviggato", repo = "tviggato.github.io")
browseURL('index.html')
publish(user = "tviggato", repo = "tviggato.github.io")
